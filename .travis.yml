#notifications:
#  email:
#    recipients:
#      - jstobbe@fias.uni-frankfurt.de
#    on_success change
#    on_failure change

language: cpp
sudo: true

#env:
#  global:
#    matrix:
#      - TRAVIS_EMPTY_JOB_WORKAROUND=true

addons:
   apt:
     packages:
       - valgrind
       - cmake
       - g++-6
       - gcc-6
       - libboost-all-dev
     sources: &sources
       - boost-latest
       - llvm-toolchain-precise
       - ubuntu-toolchain-r-test


matrix:
#  exclude:
#    env: TRAVIS_EMPTY_JOB_WORKAROUND=true
  include:
    - os: linux
      dist: trusty
      env: COMPILER=g++-6



before_script:
    - echo "deb https://ftp.fau.de/cran/bin/linux/ubuntu artful/" | sudo tee -a /etc/apt/sources.list
    - sudo apt-get update -qq
    - sudo apt-get install -qq build-essential autotools-dev mercurial libboost-all-dev libgtest-dev google-mock git libblas-dev liblapack-dev


install:
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  ############################################################################
  # Install Boost headers
  ############################################################################
  - |
    if [[ "${BOOST_VERSION}" != "" ]]; then
      BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
      if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
        if [[ "${BOOST_VERSION}" == "trunk" ]]; then
          BOOST_URL="http://github.com/boostorg/boost.git"
          travis_retry git clone --depth 1 --recursive --quiet ${BOOST_URL} ${BOOST_DIR} || exit 1
          (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers)
        else
          BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
          mkdir -p ${BOOST_DIR}
          { travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
        fi
        # Make sure we don't conflict with the Hana shipped with Boost
        rm -rf ${BOOST_ROOT}/include/boost/{hana,hana.hpp}
      fi
      CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
    fi

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew upgrade cmake || brew install cmake
    fi
  - cmake --version

  ############################################################################
  # Install Boost.Build
  ############################################################################
  - |
    if [[ "${BOOST_BUILD}" == "true" ]]; then
      (cd ${BOOST_DIR}/tools/build && ./bootstrap.sh && ./b2 install --prefix=${DEPS_DIR}/b2)
      export PATH=${DEPS_DIR}/b2/bin:${PATH}
    fi

  ############################################################################
  # Install Clang, libc++ and libc++abi
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
      if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"

        mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi ${LLVM_DIR}/clang
        travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
        travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
        travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
        travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR}/clang
        (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install -DCMAKE_CXX_COMPILER=clang++)
        (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
        (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)
      fi

      export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
      export PATH="${LLVM_DIR}/clang/bin:${PATH}"
    fi
  - ${CXX} --version

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.11.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
      doxygen --version
    fi

  ############################################################################
  # Install and use a more recent Ruby and install the gems for the benchmarks
  ############################################################################
  - rvm use 2.1 --install --binary --fuzzy
  - gem install ruby-progressbar tilt

  ############################################################################
  # Install tools to check for code formatting errors (run on OS X only)
  ############################################################################
  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]; then
      brew upgrade pcre || brew install pcre || exit 1
      brew upgrade vera++ || brew install vera++ || exit 1
    fi





script:
  # Combine global build options with OS/compiler-dependent options
  - export CMAKE_OPTIONS=${CMAKE_OPTIONS}" "${ENV_CMAKE_OPTIONS}
  ############################################################################
  # Build main and tests
  ############################################################################
  - mkdir -p build
  - cd build
  - cmake ..
  - make
  - ctest


#after_success:
#    - codecov -t c376990f-2ad6-4f7b-bbdb-5378a52e295c -X gcov

